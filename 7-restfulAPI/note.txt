
REST = Respresentational State Transfer
서버 소프트웨어 아키텍쳐를 디자인하는 스타일
웹서비스를 만들때 지켜야하는 가이드라인

1. client-server architecture 클라이언트 종류에 상관없이 데이터를 제공
2. statelessness ->http
3. cacheablity ->http
4. layered system 하나의 공통된 api를 이용해서, 클라이언트가 서버의 구조가 어떻게 되어있는지 상관없이 api를 이용할 수 있어야한다.
5. code on demand (option)
6. uniform interface ** 중요
 1) 클라이언트 요청에서 서버에있는 어떤 리소스를 원하는지 식별할수있다. 
 서버에서 데이터를 어떤 형태로 관리하든 상관없이 클라이언트가 이해할수있는 포맷으로 보내준다
 2) 서버로부터 받은 해당 도메인을 대표할 수 잇는 state, 데이터를 통해서 해당리소스에 대해서 어떻게 더 처리할수있는지에 대한 모든 정보를 알 수 있어야한다
 3) 서버에서 보내는 응답데이터 안에는 클라이언트가 어떻게 처리해야하는지 알려줌
 4) 하이퍼미디어를 어플리케이션 스테이트 엔진처럼 제공해야한다. (보통 잘지켜지지는 않음)
  ->클라이언트가 서버에게 account 요청하면 서버에서  account로 할수있는 모든 액션들에 대해서, 어떤 url을 써야하는지, 요청해야하는지 전부 링크된 url을 응답으로 보내준다.